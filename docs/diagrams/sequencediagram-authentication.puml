@startuml
title User Authentication & Registration Sequence Diagram

actor User as User
participant "Frontend UI" as Frontend
participant "Backend API" as Backend
participant "AuthManager" as AuthManager
participant "Database" as Database
participant "EmailService" as EmailService

== User Registration Flow ==

group Registration Process
    User -> Frontend: register(name, email, password, role)
    activate Frontend
    
    Frontend -> Backend: POST /api/auth/register
    activate Backend
    
    Backend -> AuthManager: validateRegistrationData()
    activate AuthManager
    AuthManager -> Database: CHECK email_exists WHERE email = ?
    activate Database
    Database --> AuthManager: email_available
    deactivate Database
    AuthManager --> Backend: validation_result
    deactivate AuthManager
    
    Backend -> AuthManager: hashPassword(password)
    activate AuthManager
    AuthManager --> Backend: hashed_password
    deactivate AuthManager
    
    Backend -> Database: INSERT INTO users VALUES (user_data)
    activate Database
    Database --> Backend: user_id
    deactivate Database
    
    Backend -> EmailService: sendVerificationEmail(user_email, token)
    activate EmailService
    EmailService --> Backend: email_sent
    deactivate EmailService
    
    Backend --> Frontend: success: true, message: 'Verification email sent'
    deactivate Backend
    
    Frontend --> User: showRegistrationSuccess()
    deactivate Frontend
end

== Email Verification Flow ==

group Email Verification
    User -> EmailService: clickVerificationLink()
    EmailService -> Backend: GET /api/auth/verify?token=...
    activate Backend
    
    Backend -> AuthManager: verifyEmailToken(token)
    activate AuthManager
    AuthManager -> Database: SELECT user_id FROM verification_tokens\nWHERE token = ? AND expires_at > NOW()
    activate Database
    Database --> AuthManager: user_data
    deactivate Database
    AuthManager --> Backend: token_valid, user_id
    deactivate AuthManager
    
    Backend -> Database: UPDATE users SET verified = true\nWHERE user_id = ?
    activate Database
    Database --> Backend: update_success
    deactivate Database
    
    Backend --> EmailService: verification_success
    deactivate Backend
    
    EmailService --> User: showVerificationSuccessPage()
end

== User Login Flow ==

group Login Process
    User -> Frontend: login(email, password)
    activate Frontend
    
    Frontend -> Backend: POST /api/auth/login
    activate Backend
    
    Backend -> AuthManager: authenticateUser(email, password)
    activate AuthManager
    AuthManager -> Database: SELECT * FROM users WHERE email = ?
    activate Database
    Database --> AuthManager: user_record
    deactivate Database
    
    AuthManager -> AuthManager: verifyPassword(input_password, stored_hash)
    AuthManager -> AuthManager: checkAccountStatus()
    AuthManager --> Backend: authentication_result, user_data
    deactivate AuthManager
    
    alt Authentication Successful
        Backend -> AuthManager: generateJWTToken(user_data)
        activate AuthManager
        AuthManager --> Backend: jwt_token, refresh_token
        deactivate AuthManager
        
        Backend -> Database: INSERT INTO sessions VALUES (user_id, token, expiry)
        activate Database
        Database --> Backend: session_created
        deactivate Database
        
        Backend --> Frontend: auth_success, tokens, user_profile
        Frontend --> User: redirectToDashboard(), storeTokens()
        
    else Authentication Failed
        Backend --> Frontend: error: 'Invalid credentials'
        Frontend --> User: showErrorMessage()
    end
    deactivate Backend
    deactivate Frontend
end

== Password Reset Flow ==

group Password Reset
    User -> Frontend: requestPasswordReset(email)
    Frontend -> Backend: POST /api/auth/forgot-password
    activate Backend
    
    Backend -> AuthManager: generateResetToken(email)
    activate AuthManager
    AuthManager -> Database: SELECT user_id FROM users WHERE email = ?
    activate Database
    Database --> AuthManager: user_exists
    deactivate Database
    AuthManager --> Backend: reset_token
    deactivate AuthManager
    
    Backend -> Database: INSERT INTO password_resets VALUES (user_id, token, expiry)
    activate Database
    Database --> Backend: token_stored
    deactivate Database
    
    Backend -> EmailService: sendResetEmail(email, reset_link)
    activate EmailService
    EmailService --> Backend: email_delivered
    deactivate EmailService
    
    Backend --> Frontend: success: true
    deactivate Backend
end

@enduml
